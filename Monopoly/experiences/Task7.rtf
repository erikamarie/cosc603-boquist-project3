{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Task7-Refactoring: Extracting an Interface\
\
This was a fairly simple task. Extracting an interface could be useful to create a subset of members in a class that are used by several other classes. This can help alleviate much of the repeated code.\
\
For this task, I extracted the getName, getPrice, and isAvailable methods. I chose these because in the case in which a different class was use this new interface, these three methods would be what initially they would use. These three methods could server different roles in a different situation. \
\
The result was that the Cell.java referenced the IOwnable file which was generated as IOwnable.java and contained the three abstract methods.}